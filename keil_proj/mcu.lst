C51 COMPILER V9.52.0.0   MCU                                                               01/11/2018 00:11:05 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MCU
OBJECT MODULE PLACED IN mcu.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\mcu.c ROM(COMPACT) BROWSE INCDIR(.\source) DEBUG OBJECTEXTEND PRINT(
                    -.\mcu.lst) TABS(2) OBJECT(mcu.obj)

line level    source

   1          //*********************************************************
   2          //  File Name   : mcu.c
   3          //  Created On  : 201801041429
   4          //  Author      : Ming
   5          //  Description : STC15F204EA related function
   6          //*********************************************************
   7          #include  "mcu.h"
   8          
   9          //---------------------------------------------------------------------------
  10          // INIT MCU
  11          //---------------------------------------------------------------------------
  12          void mcu_init (void)
  13          {
  14   1          // STC15F204EA Configure
  15   1          //************************************
  16   1          //* T0x12, T1x12
  17   1          //************************************
  18   1          AUXR        = 0x00;
  19   1      
  20   1      #ifdef JOY_SYS_COMPAT
  21   1          /*
  22   1          AUXR1       = 0x00;
  23   1          AUXR2       = 0x00;
  24   1          IAP_CONTR   = 0x00;
  25   1          WKTCL       = 0xFF;
  26   1          WKTCH       = 0xEF;*/
  27   1      #endif
  28   1      
  29   1          //************************************
  30   1          //* MCLKO_S1, MCLKO_S0, ADRJ, Tx_Rx, MCLKO_2
  31   1          //* CLK_S2, CLK_S1, CLK_S0
  32   1          //*     CLK do not output;
  33   1          //*     Uart work mode: normal
  34   1          //*     Main_CLK: div1
  35   1          //************************************
  36   1          CLK_DIV     = 0x00;
  37   1          //************************************
  38   1          //* WDT_FLAG, EN_WDT, CLR_WDT, IDLE_WDT
  39   1          //* PS2, PS1, PS0
  40   1          //*     WDT: disable
  41   1          //************************************
  42   1          WDT_CONTR   = 0x00;
  43   1          //************************************
  44   1          //* SMOD, SMOD0, LVDF, POF, GF1, GF0
  45   1          //* PD, DIL
  46   1          //************************************
  47   1          PCON        = 0x00;
  48   1          //************************************
  49   1          //* P1, P2, P3, I/O mode
  50   1          //*     dual-dir
  51   1          //************************************
  52   1          P0M1        = 0x00;
  53   1          P0M0        = 0x00;
  54   1          P1M1        = 0x00;
C51 COMPILER V9.52.0.0   MCU                                                               01/11/2018 00:11:05 PAGE 2   

  55   1          P1M0        = 0x00;
  56   1          P2M1        = 0x00;
  57   1          P2M0        = 0x00;
  58   1          P3M1        = 0x00;
  59   1          P3M0        = 0x00;
  60   1          //************************************
  61   1          // interrupt
  62   1          IE = 0x00;
  63   1          TCON = 0x00;
  64   1          mcu_set_exint (INT_IDX_0, INT_MOD_STOP);
  65   1          mcu_set_exint (INT_IDX_1, INT_MOD_STOP);
  66   1          mcu_set_tmr   (TMR_IDX_0, TMR_MOD_STOP);
  67   1          mcu_set_tmr   (TMR_IDX_1, TMR_MOD_STOP);
  68   1      }
  69          
  70          //---------------------------------------------------------------------------
  71          // SET Interrupt INT0 and INT1
  72          // Description: initial ext_int, set flag, disable interrupt enable
  73          //---------------------------------------------------------------------------
  74          void mcu_set_exint (unsigned char idx, unsigned char mode)
  75          {
  76   1          // disable interrupt
  77   1          bit ea_bak;
  78   1          ea_bak = EA;
  79   1          EA = 0;
  80   1          if (idx == INT_IDX_0)
  81   1          {
  82   2              EX0 = 0;        // disable int0
  83   2              IE0 = 0;        // clear int0 flag
  84   2              if (mode == INT_MOD_START)
  85   2              {
  86   3                  IT0 = 1;        // int0 falling edge trigger int
  87   3              }
  88   2              else if (mode == INT_MOD_STOP)
  89   2              {
  90   3                  IT0 = 0;
  91   3              }
  92   2          }
  93   1          else if (idx == INT_IDX_1)
  94   1          {
  95   2              EX1 = 0;        // disable int1
  96   2              IE1 = 0;        // clear int1 flag
  97   2              if (mode == INT_MOD_START)
  98   2              {
  99   3                  IT1 = 1;        // int1 falling edge trigger int
 100   3              }
 101   2              else if (mode == INT_MOD_STOP)
 102   2              {
 103   3                  IT1 = 0;
 104   3              }
 105   2          }
 106   1          EA = ea_bak;
 107   1      }
 108          
 109          //---------------------------------------------------------------------------
 110          // SET T0 and T1
 111          // Description: inital timer, set config, start timer!
 112          //---------------------------------------------------------------------------
 113          void mcu_set_tmr (unsigned char idx, unsigned char mode)
 114          {
 115   1          // init reg
 116   1          bit ea_bak;
C51 COMPILER V9.52.0.0   MCU                                                               01/11/2018 00:11:05 PAGE 3   

 117   1          ea_bak = EA;
 118   1          EA = 0;     // disable all interrupt
 119   1          // T0
 120   1          if (idx == TMR_IDX_0)
 121   1          {
 122   2              TR0 = 0;    // stop T0
 123   2              ET0 = 0;    // disable T0 overflow interrupt
 124   2              TF0 = 0;    // clear T0 overflow interrupt flag
 125   2              // conf timer
 126   2              if (mode == TMR_MOD_CAP)
 127   2              {
 128   3                  TMOD = (TMOD & 0xF0) + 0x08;    // GATE=1, C/T=0, M1=0, M0=0
 129   3                  TL0 = 0;    // reset TL0
 130   3                  TH0 = 0;    // reset TH0
 131   3                  TR0 = 1;    // start T0
 132   3              }
 133   2              else if (mode == TMR_MOD_50MS)
 134   2              {
 135   3                  TMOD = (TMOD & 0xF0) + 0x00;    // GATE=0, C/T=0, M1=0, M0=0
 136   3                  TL0 = TL_INIT_50MS;     // load TL0
 137   3                  TH0 = TH_INIT_50MS;     // load TH0
 138   3                  ET0 = 1;                // enable T0 overflow interrupt
 139   3                  TR0 = 1;                // start T0
 140   3              }
 141   2              else if (mode == TMR_MOD_10MS)
 142   2              {
 143   3                  TMOD = (TMOD & 0xF0) + 0x00;    // GATE=0, C/T=0, M1=0, M0=0
 144   3                  TL0 = TL_INIT_10MS;     // load TL0
 145   3                  TH0 = TH_INIT_10MS;     // load TH0
 146   3                  ET0 = 1;                // enable T0 overflow interrupt
 147   3                  TR0 = 1;                // start T0
 148   3              }
 149   2              else if (mode == TMR_MOD_STOP)
 150   2              {
 151   3              }
 152   2              // set reg
 153   2              EA = ea_bak;    // enable all interrupt
 154   2          }
 155   1          // T1
 156   1          else if (idx == TMR_IDX_1)
 157   1          {
 158   2              TR1 = 0;    // stop T1
 159   2              ET1 = 0;    // disable T1 overflow interrupt
 160   2              TF1 = 0;    // clear T1 overflow interrupt flag
 161   2              // conf timer
 162   2              if (mode == TMR_MOD_CAP)
 163   2              {
 164   3                  TMOD = (TMOD & 0x0F) + 0x80;    // GATE=1, C/T=0, M1=0, M0=0
 165   3                  TL1 = 0;    // reset TL1
 166   3                  TH1 = 0;    // reset TH1
 167   3                  TR1 = 1;    // start T1
 168   3              }
 169   2              else if (mode == TMR_MOD_50MS)
 170   2              {
 171   3                  TMOD = (TMOD & 0x0F) + 0x00;    // GATE=0, C/T=0, M1=0, M0=0
 172   3                  TL1 = TL_INIT_50MS;     // load TL1
 173   3                  TH1 = TH_INIT_50MS;     // load TH1
 174   3                  ET1 = 1;                // enable T1 overflow interrupt
 175   3                  TR1 = 1;                // start T1
 176   3              }
 177   2              else if (mode == TMR_MOD_10MS)
 178   2              {
C51 COMPILER V9.52.0.0   MCU                                                               01/11/2018 00:11:05 PAGE 4   

 179   3                  TMOD = (TMOD & 0x0F) + 0x00;    // GATE=0, C/T=0, M1=0, M0=0
 180   3                  TL1 = TL_INIT_10MS;     // load TL1
 181   3                  TH1 = TH_INIT_10MS;     // load TH1
 182   3                  ET1 = 1;                // enable T1 overflow interrupt
 183   3                  TR1 = 1;                // start T1
 184   3              }
 185   2              else if (mode == TMR_MOD_STOP)
 186   2              {
 187   3              }
 188   2              // set reg
 189   2              EA = ea_bak;    // enable all interrupt
 190   2          }
 191   1      }
 192          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    248    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
