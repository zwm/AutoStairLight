C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/12/2018 00:22:38 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE PROJ_LIB
OBJECT MODULE PLACED IN proj_lib.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\proj_lib.c ROM(COMPACT) BROWSE INCDIR(.\source) DEBUG OBJECTEXTEND P
                    -RINT(.\proj_lib.lst) TABS(2) OBJECT(proj_lib.obj)

line level    source

   1          #include "proj_lib.h"
   2          
   3          //---------------------------------------------------------------------------
   4          // Global Variable Define
   5          //---------------------------------------------------------------------------
   6          volatile u16  time_tick;
   7          volatile u16  time_sec;
   8          volatile u8   fsm;
   9          volatile u8   us0_gap;
  10          volatile u8   us1_gap;
  11          volatile u16  us0_err;
  12          volatile u16  us1_err;
  13          volatile bit  stair_idle;
  14          volatile bit  us0_frash;
  15          volatile bit  us1_frash;
  16          volatile u16  us0_meas[4];
  17          volatile u16  us1_meas[4];
  18          volatile STRUCT_INT_CNT data st_x0;
  19          volatile STRUCT_INT_CNT data st_x1;
  20          volatile STRUCT_INT_CNT data st_t0;
  21          volatile STRUCT_INT_CNT data st_t1;
  22          volatile STRUCT_INT_CNT data *st_p;
  23          
  24          //---------------------------------------------------------------------------
  25          // Check struct increased by interrupt
  26          //---------------------------------------------------------------------------
  27          u8 inc_check (STRUCT_INT_CNT *p)
  28          {
  29   1          u8 cur;
  30   1          cur = p->cnt;
  31   1          if (cur > p->bak)       // normal increase
  32   1          {
  33   2              cur = cur - p->bak;
  34   2              p->bak = p->cnt;
  35   2          }
  36   1          else if (cur < p->bak)  // overflow increase
  37   1          {
  38   2              cur = 256 - p->bak + cur;
  39   2              p->bak = p->cnt;
  40   2          }
  41   1          else                    // no increase
  42   1          {
  43   2              cur = 0;
  44   2          }
  45   1          return cur;
  46   1      }
  47          
  48          //---------------------------------------------------------------------------
  49          // Initial System
  50          //---------------------------------------------------------------------------
  51          void sys_init (void)
  52          {
  53   1          // device init
  54   1          mcu_init ();
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/12/2018 00:22:38 PAGE 2   

  55   1          LcdInit ();
  56   1          // parameter init
  57   1          st_x0.cnt = 0;
  58   1          st_x0.bak = 0;
  59   1          st_x1.cnt = 0;
  60   1          st_x1.bak = 0;
  61   1          st_t0.cnt = 0;
  62   1          st_t0.bak = 0;
  63   1          st_t1.cnt = 0;
  64   1          st_t1.bak = 0;
  65   1          us0_frash = 0;
  66   1          us1_frash = 0;
  67   1          us0_meas[0] = 0;
  68   1          us0_meas[1] = 0;
  69   1          us0_meas[2] = 0;
  70   1          us0_meas[3] = 0;
  71   1          us1_meas[0] = 0;
  72   1          us1_meas[1] = 0;
  73   1          us1_meas[2] = 0;
  74   1          us1_meas[3] = 0;
  75   1          time_tick = 0;
  76   1          time_sec = 0;
  77   1          fsm = FSM_US01;
  78   1          us0_gap = 0;
  79   1          us1_gap = 0;
  80   1          us0_err = 0;
  81   1          us1_err = 0;
  82   1          stair_idle = 0;
  83   1          us0_trig = 0;
  84   1          us1_trig = 0;
  85   1          EA = 0;
  86   1      }
  87          
  88          //---------------------------------------------------------------------------
  89          // Trigger one measurement of untrasonic 0
  90          //---------------------------------------------------------------------------
  91          void trig_us0 (void)
  92          {
  93   1          DelayUs(20);
  94   1          us0_trig = 1;
  95   1          DelayUs(20);        // more than 10us
  96   1          us0_trig = 0;
  97   1      }
  98          
  99          //---------------------------------------------------------------------------
 100          // Trigger one measurement of untrasonic 1
 101          //---------------------------------------------------------------------------
 102          void trig_us1 (void)
 103          {
 104   1          DelayUs(20);
 105   1          us1_trig = 1;
 106   1          DelayUs(20);        // more than 10us
 107   1          us1_trig = 0;
 108   1      }
 109          
 110          //---------------------------------------------------------------------------
 111          // FSM state: FSM_US01 handler
 112          //---------------------------------------------------------------------------
 113          void fsm_us01_proc(void)
 114          {
 115   1          u8 i;
 116   1          bit ea_bak;
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/12/2018 00:22:38 PAGE 3   

 117   1          // debug
 118   1          LcdDispChar (19, 0, fsm+'0');
 119   1          ea_bak = EA;
 120   1      #ifdef CHECK_MODE_INT
 121   1          mcu_set_exint (INT_IDX_0, INT_MOD_STOP );
 122   1          mcu_set_exint (INT_IDX_1, INT_MOD_STOP );
 123   1          EA = 1;
 124   1      #else
                  EA = 0;
              #endif
 127   1          if (us0_gap != 0)
 128   1          {
 129   2              us0_gap = us0_gap - 1;
 130   2          }
 131   1          if (us0_gap == 0)
 132   1          {
 133   2              mcu_set_exint (INT_IDX_0, INT_MOD_START);
 134   2              mcu_set_tmr (TMR_IDX_0, TMR_MOD_CAP  );
 135   2              trig_us0();
 136   2          }
 137   1          if (us1_gap != 0)
 138   1          {
 139   2              us1_gap = us1_gap - 1;
 140   2          }
 141   1          if (us1_gap == 0)
 142   1          {
 143   2              mcu_set_exint (INT_IDX_1, INT_MOD_START);
 144   2              mcu_set_tmr (TMR_IDX_1, TMR_MOD_CAP  );
 145   2              trig_us1();
 146   2          }
 147   1          // wait finish
 148   1          DelayMs(50);
 149   1          mcu_set_tmr (TMR_IDX_0, TMR_MOD_STOP );
 150   1          mcu_set_tmr (TMR_IDX_1, TMR_MOD_STOP );
 151   1      #ifdef CHECK_MODE_INT
 152   1          // store value
 153   1          if (us0_gap == 0)   // ultra-sonic 0
 154   1          {
 155   2              i = inc_check (&st_x0);
 156   2              if (i == 1)
 157   2              {
 158   3                  us0_meas[3] = us0_meas[2];
 159   3                  us0_meas[2] = us0_meas[1];
 160   3                  us0_meas[1] = us0_meas[0];
 161   3                  us0_meas[0] = ((TH0<<8) + TL0);
 162   3                  us0_frash   = 1;
 163   3              }
 164   2              else
 165   2              {
 166   3                  us0_err = us0_err + i + 10;
 167   3                  us0_gap = MEAS_ERR_GAP;
 168   3              }
 169   2          }
 170   1          if (us1_gap == 0)   // ultra-sonic 1
 171   1          {
 172   2              i = inc_check (&st_x1);
 173   2              if (i == 1)
 174   2              {
 175   3                  us1_meas[3] = us1_meas[2];
 176   3                  us1_meas[2] = us1_meas[1];
 177   3                  us1_meas[1] = us1_meas[0];
 178   3                  us1_meas[0] = ((TH1<<8) + TL1);
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/12/2018 00:22:38 PAGE 4   

 179   3                  us1_frash   = 1;
 180   3              }
 181   2              else
 182   2              {
 183   3                  us1_err = us1_err + i + 10;
 184   3                  us1_gap = MEAS_ERR_GAP;
 185   3              }
 186   2          }
 187   1      #else       // POLL MODE
                  // store value
                  if (us0_gap == 0)   // ultra-sonic 0
                  {
                      if (IE0)
                      {
                          IE0 = 0;
                          us0_meas[3] = us0_meas[2];
                          us0_meas[2] = us0_meas[1];
                          us0_meas[1] = us0_meas[0];
                          us0_meas[0] = ((TH0<<8) + TL0);
                          us0_frash   = 1;
                      }
                      else
                      {
                          us0_err = us0_err + 1;
                          us0_gap = MEAS_ERR_GAP;
                      }
                  }
                  if (us1_gap == 0)   // ultra-sonic 1
                  {
                      if (IE1)
                      {
                          IE1 = 0;
                          us1_meas[3] = us1_meas[2];
                          us1_meas[2] = us1_meas[1];
                          us1_meas[1] = us1_meas[0];
                          us1_meas[0] = ((TH1<<8) + TL1);
                          us1_frash   = 1;
                      }
                      else
                      {
                          us1_err = us1_err + 1;
                          us1_gap = MEAS_ERR_GAP;
                      }
                  }
              #endif
 224   1          mcu_set_exint (INT_IDX_0, INT_MOD_STOP );
 225   1          mcu_set_exint (INT_IDX_1, INT_MOD_STOP );
 226   1          EA = ea_bak;
 227   1          // jump to next state
 228   1          fsm = FSM_TICK;
 229   1      }
 230          
 231          //---------------------------------------------------------------------------
 232          // FSM: FSM_TICK state handler, process each 1/4 second
 233          // JOY_SYS TEST DISPLAY:
 234          // char_index  |012345678901234567890123|
 235          // label       |len       err_num  time |
 236          // line0       |xxxxx     xxxxx         |
 237          // line1       |xxxxx     xxxxx    xxxxx|
 238          //---------------------------------------------------------------------------
 239          void fsm_tick_proc (void)
 240          {
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/12/2018 00:22:38 PAGE 5   

 241   1          u16 i, j;
 242   1          u8  k;
 243   1          bit ea_bak;
 244   1          ea_bak = EA;
 245   1          i = 0;
 246   1          j = 0;
 247   1          k = 0;
 248   1          LcdDispChar (19, 0, fsm+'0');
 249   1          // 250ms timer
 250   1          EA = 1;
 251   1          mcu_set_tmr (TMR_IDX_0, TMR_MOD_10MS);
 252   1          while (1)
 253   1          {
 254   2              k = k+1;
 255   2              LcdDispChar (22, 0, (k%100)/10+'0');
 256   2              LcdDispChar (23, 0, (k%100)%10+'0');
 257   2      
 258   2      //        LcdDispChar (16, 0, (j%100)/10+'0');
 259   2      //        LcdDispChar (17, 0, (j%100)%10+'0');
 260   2      
 261   2              LcdDispChar (16, 0, (st_t0.cnt%100)/10+'0');
 262   2              LcdDispChar (17, 0, (st_t0.cnt%100)%10+'0');
 263   2      
 264   2              LcdDispChar (16, 1, (st_t0.bak%100)/10+'0');
 265   2              LcdDispChar (17, 1, (st_t0.bak%100)%10+'0');
 266   2      
 267   2              if (ET0)
 268   2                  LcdDispChar (20, 0, '1');
 269   2              else
 270   2                  LcdDispChar (20, 0, '0');
 271   2              if (TF0)
 272   2                  LcdDispChar (21, 0, '1');
 273   2              else
 274   2                  LcdDispChar (21, 0, '0');
 275   2      
 276   2      /*        if (EA)
 277   2                  LcdDispChar (7, 0, '1');
 278   2              else
 279   2                  LcdDispChar (7, 0, '0');
 280   2              if (TR0)
 281   2                  LcdDispChar (8, 0, '1');
 282   2              else
 283   2                  LcdDispChar (8, 0, '0');*/
 284   2      
 285   2              LcdDispChar (7, 0, (TH0%100)+'0');
 286   2              LcdDispChar (8, 0, (TH0%100)/10+'0');
 287   2              LcdDispChar (9, 0, (TH0%100)%10+'0');
 288   2      
 289   2              LcdDispChar (7, 1, (TL0%100)+'0');
 290   2              LcdDispChar (8, 1, (TL0%100)/10+'0');
 291   2              LcdDispChar (9, 1, (TL0%100)%10+'0');
 292   2      
 293   2      
 294   2      
 295   2              EA = 0;
 296   2              i = inc_check (&st_t0);
 297   2              EA = 1;
 298   2              j = j + i;
 299   2              if (j >= (SYS_TICK_CYC/10))
 300   2              {
 301   3                  mcu_set_tmr (TMR_IDX_0, TMR_MOD_STOP);
 302   3                  break;
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/12/2018 00:22:38 PAGE 6   

 303   3              }
 304   2          }
 305   1          EA = ea_bak;
 306   1          time_tick = time_tick + 2;
 307   1          // display time of second
 308   1          if (time_tick%4 == 0)
 309   1          {
 310   2              time_sec = time_sec + 1;
 311   2              LcdDispInt  (19, 1, time_sec);
 312   2          }
 313   1          // display distance
 314   1          if (us0_frash == 1)
 315   1          {
 316   2              us0_frash = 0;
 317   2              i = us0_meas[0]*0.34;
 318   2              LcdDispInt  (0, 0, i);
 319   2              LcdDispChar (5, 0, 'm');
 320   2              LcdDispChar (6, 0, 'm');
 321   2          }
 322   1          if (us1_frash == 1)
 323   1          {
 324   2              us1_frash = 0;
 325   2              i = us1_meas[0]*0.34;
 326   2              LcdDispInt  (0, 1, i);
 327   2              LcdDispChar (5, 1, 'm');
 328   2              LcdDispChar (6, 1, 'm');
 329   2          }
 330   1          j = 0;
 331   1          if (us0_gap == 0 && us0_frash == 0)
 332   1          {
 333   2              j = j + 1;
 334   2          }
 335   1          if (us1_gap == 0 && us1_frash == 0)
 336   1          {
 337   2              j = j + 1;
 338   2          }
 339   1          if (j != 0)
 340   1          {
 341   2              fsm = FSM_ERRO;
 342   2          }
 343   1          else 
 344   1          {
 345   2              fsm = FSM_US01;
 346   2          }
 347   1      }
 348          
 349          //---------------------------------------------------------------------------
 350          // FSM: FSM_ERRO handler
 351          //---------------------------------------------------------------------------
 352          void fsm_erro_proc(void)
 353          {
 354   1          // debug
 355   1          LcdDispChar (19, 0, fsm+'0');
 356   1      
 357   1          LcdDispInt  (10, 0, us0_err);
 358   1          LcdDispInt  (10, 1, us1_err);
 359   1          fsm = FSM_US01;
 360   1      }
 361          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/12/2018 00:22:38 PAGE 7   

   CODE SIZE        =   1096    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
