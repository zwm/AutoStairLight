C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/10/2018 18:01:32 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE PROJ_LIB
OBJECT MODULE PLACED IN proj_lib.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\proj_lib.c ROM(COMPACT) BROWSE INCDIR(.\source) DEBUG OBJECTEXTEND P
                    -RINT(.\proj_lib.lst) TABS(2) OBJECT(proj_lib.obj)

line level    source

   1          #include "proj_lib.h"
   2          
   3          //---------------------------------------------------------------------------
   4          // Global Variable Define
   5          //---------------------------------------------------------------------------
   6          volatile u16  time_tick;
   7          volatile u16  time_sec;
   8          volatile u8   fsm;
   9          volatile u8   us0_gap;
  10          volatile u8   us1_gap;
  11          volatile u16  us0_err;
  12          volatile u16  us1_err;
  13          volatile bit  stair_idle;
  14          volatile bit  us0_frash;
  15          volatile bit  us1_frash;
  16          volatile u16  us0_meas[4];
  17          volatile u16  us1_meas[4];
  18          volatile STRUCT_INT_CNT data st_x0;
  19          volatile STRUCT_INT_CNT data st_x1;
  20          volatile STRUCT_INT_CNT data st_t0;
  21          volatile STRUCT_INT_CNT data st_t1;
  22          volatile STRUCT_INT_CNT data *st_p;
  23          
  24          //---------------------------------------------------------------------------
  25          // Check struct increased by interrupt
  26          //---------------------------------------------------------------------------
  27          u8 inc_check (STRUCT_INT_CNT *p)
  28          {
  29   1          u8 cur;
  30   1          cur = p->cnt;
  31   1          if (cur > p->bak)       // normal increase
  32   1          {
  33   2              cur = cur - p->bak;
  34   2              p->bak = p->cnt;
  35   2          }
  36   1          else if (cur < p->bak)  // overflow increase
  37   1          {
  38   2              cur = 256 - p->bak + cur;
  39   2              p->bak = p->cnt;
  40   2          }
  41   1          else                    // no increase
  42   1          {
  43   2              cur = 0;
  44   2          }
  45   1          return cur;
  46   1      }
  47          
  48          //---------------------------------------------------------------------------
  49          // Initial System
  50          //---------------------------------------------------------------------------
  51          void sys_init (void)
  52          {
  53   1          // device init
  54   1          mcu_init ();
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/10/2018 18:01:32 PAGE 2   

  55   1          LcdInit ();
  56   1          // parameter init
  57   1          st_x0.cnt = 0;
  58   1          st_x0.bak = 0;
  59   1          st_x1.cnt = 0;
  60   1          st_x1.bak = 0;
  61   1          st_t0.cnt = 0;
  62   1          st_t0.bak = 0;
  63   1          st_t1.cnt = 0;
  64   1          st_t1.bak = 0;
  65   1          us0_frash = 0;
  66   1          us1_frash = 0;
  67   1          us0_meas[0] = 0;
  68   1          us0_meas[1] = 0;
  69   1          us0_meas[2] = 0;
  70   1          us0_meas[3] = 0;
  71   1          us1_meas[0] = 0;
  72   1          us1_meas[1] = 0;
  73   1          us1_meas[2] = 0;
  74   1          us1_meas[3] = 0;
  75   1          time_tick = 0;
  76   1          time_sec = 0;
  77   1          fsm = FSM_US01;
  78   1          us0_gap = 0;
  79   1          us1_gap = 0;
  80   1          us0_err = 0;
  81   1          us1_err = 0;
  82   1          stair_idle = 0;
  83   1          us0_trig = 0;
  84   1          us1_trig = 0;
  85   1          EA = 1;
  86   1      }
  87          
  88          //---------------------------------------------------------------------------
  89          // Trigger one measurement of untrasonic 0
  90          //---------------------------------------------------------------------------
  91          void trig_us0 (void)
  92          {
  93   1          us0_trig = 1;
  94   1          DelayUs(20);        // more than 10us
  95   1          us0_trig = 0;
  96   1      }
  97          
  98          //---------------------------------------------------------------------------
  99          // Trigger one measurement of untrasonic 1
 100          //---------------------------------------------------------------------------
 101          void trig_us1 (void)
 102          {
 103   1          us1_trig = 1;
 104   1          DelayUs(20);        // more than 10us
 105   1          us1_trig = 0;
 106   1      }
 107          
 108          //---------------------------------------------------------------------------
 109          // FSM state: FSM_US01 handler
 110          //---------------------------------------------------------------------------
 111          void fsm_us01_proc(void)
 112          {
 113   1          // set tmr
 114   1          if (us0_gap != 0)
 115   1          {
 116   2              us0_gap = us0_gap - 1;
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/10/2018 18:01:32 PAGE 3   

 117   2          }
 118   1          if (us0_gap == 0)
 119   1          {
 120   2              mcu_set_exint (INT_IDX_0, INT_MOD_START);
 121   2              mcu_set_tmr (TMR_IDX_0, TMR_MOD_CAP  );
 122   2              trig_us0();
 123   2          }
 124   1          if (us1_gap != 0)
 125   1          {
 126   2              us1_gap = us1_gap - 1;
 127   2          }
 128   1          if (us1_gap == 0)
 129   1          {
 130   2              mcu_set_exint (INT_IDX_1, INT_MOD_START);
 131   2              mcu_set_tmr (TMR_IDX_1, TMR_MOD_CAP  );
 132   2              trig_us1();
 133   2          }
 134   1          // wait finish
 135   1          DelayMs(50);
 136   1          mcu_set_tmr (TMR_IDX_0, TMR_MOD_STOP );
 137   1          mcu_set_tmr (TMR_IDX_1, TMR_MOD_STOP );
 138   1          // store value
 139   1          if (us0_gap == 0)
 140   1          {
 141   2              if (IE0)
 142   2              {
 143   3                  IE0 = 0;
 144   3                  us0_meas[3] = us0_meas[2];
 145   3                  us0_meas[2] = us0_meas[1];
 146   3                  us0_meas[1] = us0_meas[0];
 147   3                  us0_meas[0] = ((TH0<<8) + TL0);
 148   3                  us0_frash   = 1;
 149   3              }
 150   2              else
 151   2              {
 152   3                  us0_gap = MEAS_ERR_GAP;
 153   3              }
 154   2          }
 155   1          if (us0_gap == 0)
 156   1          {
 157   2              if (IE1)
 158   2              {
 159   3                  IE1 = 0;
 160   3                  us1_meas[3] = us1_meas[2];
 161   3                  us1_meas[2] = us1_meas[1];
 162   3                  us1_meas[1] = us1_meas[0];
 163   3                  us1_meas[0] = ((TH1<<8) + TL1);
 164   3                  us1_frash   = 1;
 165   3              }
 166   2              else
 167   2              {
 168   3                  us1_gap = MEAS_ERR_GAP;
 169   3              }
 170   2          }
 171   1          // jump to next state
 172   1          fsm = FSM_TICK;
 173   1      }
 174          
 175          //---------------------------------------------------------------------------
 176          // FSM: FSM_TICK state handler, process each 1/4 second
 177          // JOY_SYS TEST DISPLAY:
 178          // char_index  |012345678901234567890123|
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/10/2018 18:01:32 PAGE 4   

 179          // label       |len       err_num  time |
 180          // line0       |xxxxx     xxxxx         |
 181          // line1       |xxxxx     xxxxx    xxxxx|
 182          //---------------------------------------------------------------------------
 183          void fsm_tick_proc (void)
 184          {
 185   1          u16 i, j;
 186   1          i = 0;
 187   1          j = 0;
 188   1          // 250ms timer
 189   1          mcu_set_tmr (TMR_IDX_0, TMR_MOD_10MS);
 190   1          while (1)
 191   1          {
 192   2              i = inc_check (&st_t0);
 193   2              j = j + i;
 194   2              if (j >= (SYS_TICK_CYC/10))
 195   2              {
 196   3                  mcu_set_tmr (TMR_IDX_0, TMR_MOD_STOP);
 197   3                  break;
 198   3              }
 199   2          }
 200   1          time_tick = time_tick + 1;
 201   1          // display time of second
 202   1          if (time_tick%4 == 0)
 203   1          {
 204   2              time_sec = time_sec + 1;
 205   2              LcdDispInt  (19, 1, time_sec);
 206   2          }
 207   1          // display distance
 208   1          if (us0_frash == 1)
 209   1          {
 210   2              us0_frash = 0;
 211   2              i = us0_meas[0]*0.34;
 212   2              LcdDispInt  (0, 0, i);
 213   2              LcdDispChar (5, 0, 'm');
 214   2              LcdDispChar (6, 0, 'm');
 215   2          }
 216   1          if (us1_frash == 1)
 217   1          {
 218   2              us1_frash = 0;
 219   2              i = us1_meas[0]*0.34;
 220   2              LcdDispInt  (0, 1, i);
 221   2              LcdDispChar (5, 1, 'm');
 222   2              LcdDispChar (6, 1, 'm');
 223   2          }
 224   1          j = 0;
 225   1          if (us0_gap == 0 && us0_frash == 0)
 226   1          {
 227   2              us0_err = us0_err + 1;
 228   2              j = j + 1;
 229   2          }
 230   1          if (us1_gap == 0 && us1_frash == 0)
 231   1          {
 232   2              us1_err = us1_err + 1;
 233   2              j = j + 1;
 234   2          }
 235   1          if (j != 0)
 236   1          {
 237   2              fsm = FSM_ERRO;
 238   2          }
 239   1          else 
 240   1          {
C51 COMPILER V9.52.0.0   PROJ_LIB                                                          01/10/2018 18:01:32 PAGE 5   

 241   2              fsm = FSM_US01;
 242   2          }
 243   1      }
 244          
 245          //---------------------------------------------------------------------------
 246          // FSM: FSM_ERRO handler
 247          //---------------------------------------------------------------------------
 248          void fsm_erro_proc(void)
 249          {
 250   1          LcdDispInt  (10, 0, us0_err);
 251   1          LcdDispInt  (10, 1, us1_err);
 252   1          fsm = FSM_US01;
 253   1      }
 254          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    644    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
